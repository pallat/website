Concurrency
Go เตรียมวิธีการทำ concurrency ให้ซึ่งเป็นแกนหลักของตัวภาษา ในบทเรียนนี้จะนำมาแสดงให้เห็นตัวอย่างว่ามันทำงานอย่างไร

The Go Authors
https://golang.org

* Goroutines

_goroutine_ คือ thread แบบเบาๆ ที่ถูกจัดการโดย runtime ของ Go

	go f(x, y, z)

ให้ goroutine เริ่มทำงาน

	f(x, y, z)

การประมวลค่าของ `f`, `x`, `y`, และ `z` จะเกิดขึ้นใน goroutine ปัจจุบัน และการทำงานของ `f` จะไปเกิดที่ goroutine ตัวใหม่

goroutine จะทำงานอยู่ในพื้นที่ในหน่วยความจำเดียวกันทั้งหมด เพราะฉะนั้นการใช้ หน่วยความจำร่วมกัน
จะต้องจัดการเรื่องการซิงค์กันให้ดี
แพ็คเกจ [[https://golang.org/pkg/sync/][`sync`]] ได้เตรียมเครื่องมืออำนวยความสะดวกให้บ้างแล้ว
อย่างไรก็ดี คุณอาจจะไม่ต้องใช้มันมากนักเพราะ Go ยังมีเครื่องมือพื้นฐานอีกหลายตัว (ดูในหน้าถัดไป)

.play concurrency/goroutines.go

* Channels

channel เป็นการเชื่อม type เข้าด้วยกัน โดยคุณสามารถส่งและรับค่า ผ่านตัวดำเนินการ `<-`

	ch <- v    // Send v to channel ch.
	v := <-ch  // Receive from ch, and
	           // assign value to v.

(ข้อมูลจะไหลตามทิศทางของลูกศร)

channel เหมือนกับ map และ slice ตรงที่ต้องสร้างมันขึ้นมาก่อนถึงจะนำไปใช้ได้:

	ch := make(chan int)

โดยปกติ การส่งและการรับ จะถูกบล็อคไว้ จนกว่าอีกฝั่งจะพร้อม
นั่นแปลว่า goroutine จะสามารถซิงค์กันได้โดยปริยาย โดยไม่ต้องจงใจล็อคหรือไปสร้างเงื่อนไขด้วยตัวแปรอะไรอื่น

โค้ดตัวอย่างนี้จะรวมเลขใน slice ด้วยการกระจายงานออกไปให้ goroutine สองตัว
เมื่อทั้งคู่ทำงานเสร็จ มันจะนำมาคำนวณผลลัพธ์สุดท้ายอีกที

.play concurrency/channels.go

* Buffered Channels

channel สามารถ _อมค่า_ ไว้ได้ด้วยการให้ความยาวบัพเฟอร์ไปเป็นอากิวเม้นต์ตัวที่สองใน `make`
วิธีสร้าง buffered channel ทำแบบนี้:

	ch := make(chan int, 100)

การส่งค่าเข้าไปใน buffered channel จะถูกบล็อคเมื่อบัฟเฟอร์เต็ม ส่วนการรับจะถูกบล็อค ถ้าบัฟเฟอร์เป็นค่าว่าง

ทดลองแก้ตัวอย่างด้วยการใส่ของให้ล้นบัฟเฟอร์แล้วสักเกตว่าจะเกิดอะไรขึ้น

.play concurrency/buffered-channels.go

* Range and Close

ผู้ส่งสามารถที่จะสั่ง `close` channel ถ้ามั่นใจว่าไม่มีของจะส่งให้แล้ว
ส่วนฝั่งผู้รับสามารถตรวจสอบได้ว่า channel ถูกปิดไปแล้วหรือยัง ด้วยการรับค่าที่สองออกมา

	v, ok := <-ch

`ok` เป็น `false` ถ้าไม่มีค่าส่งมาให้อีกต่อไปและ channel ถูกปิดไปแล้ว

ลูป `for`i`:=`range`c` จะรับค่าออกมาจาก channel ไปเรื่อยๆ จนกว่ามันจะถูกปิด

*คำเตือน:* ผู้ส่งเท่านั้นที่สามารถปิด channel อย่าให้ผู้รับเป็นตัวทำเด็ดขาด เพราะการส่งของเข้าไปใน channel ที่ปิดไปแล้วจะทำให้เกิด panic

*อีกข้อแนะนำ:* อย่าเห็น channel เป็นเหมือน file คุณไม่จำเป็นต้องไป close มัน การ close นั้นจำเป็นเฉพาะเมื่อมีความต้องการที่จะบอกผู้รับให้รู้ว่า จากนี้จะไม่มีข้อมูลส่งไปแล้ว คล้ายๆกับการจบลูป `range`

.play concurrency/range-and-close.go

* Select

`select` จะช่วยให้สามารถรอ goroutine ที่คุยไว้พร้อมกันหลายๆ ตัวได้

การบล็อคของ `select` จะถูกปล่อยให้ผ่านเมื่อหนึ่งในเคสที่รออยู่มาถึง และมันจะทำงานที่เคสนั้น
แต่ถ้ามาพร้อมกันหลายๆ ตัว มันจะสุ่มเลือกเลย

.play concurrency/select.go

* Default Selection

เคส `default` ใน `select` จะทำงานเมื่อไม่มีเคสไหนพร้อมทำงานเลย

การใช้ `default` มักจะใช้เมื่อพยายามจะส่งหรือรับข้อมูลโดยไม่ถูกบล็อค

	select {
	case i := <-c:
		// use i
	default:
		// receiving from c would block
	}

.play concurrency/default-selection.go

* Exercise: Equivalent Binary Trees

การเก็บค่าใน binary tree ด้วยชุดข้อมูลเดียวกัน สามารถเก็บได้หลายรูปแบบ ตัวอย่างเช่น
binary tree ทั้งสองตัวนี้ เก็บลำดับข้อมูลเดียวกันคือ 1, 1, 2, 3, 5, 8, 13

.image /_content/img/tree.png

การเขียนฟังก์ชั่นมาตรวจสอบว่าทั้งสอง binary tree นี้เก็บข้อมูลชุดเดียวกันหรือไม่นั้น ค่อนข้างมีความซับซ้อนในแต่ละภาษาต่างกันไป
เราจะใช้ concurrency และ channel ของ Go มาเขียนเพื่อแก้โจทย์นี้ให้ง่ายขึ้น

ตัวอย่างนี้ใช้ type ที่กำหนดขึ้นจากแพ็คเกจ `tree`:

	type Tree struct {
		Left  *Tree
		Value int
		Right *Tree
	}


อธิบายต่อที่ [[javascript:click('.next-page')][next page]]

* Exercise: Equivalent Binary Trees

*1.* ทำฟังก์ชั่น `Walk`

*2.* ทดสอบฟังก์ชั่น `Walk`

ฟังก์ชั่น `tree.New(k)` จะสุ่มโครงสร้างขึ้นมาให้ตัวหนึ่ง (แต่เรียงลำดับมาให้) ซึ่ง binary tree นั้นจะเก็บข้อมูล `k`, `2k`, `3k`, ..., `10k` เอาไว้

สร้าง channel มาตัวหนึ่งชื่อ `ch` และให้มันเดินเข้าไปเลย

	go Walk(tree.New(1), ch)

จากนั้นให้อ่านและพิพม์ทั้ง 10 ค่าออกมาจาก channel มันควรจะเป็นเลข 1, 2, 3, ..., 10

*3.* เขียนฟังก์ชั่น `Same` โดยใช้ `Walk` เพื่อตรวจสอบว่า `t1` และ `t2` เก็บค่าเดียวกันหรือไม่

*4.* ทดสอบฟังก์ชั่น `Same`

`Same(tree.New(1),`tree.New(1))` ควรได้ค่า true และ `Same(tree.New(1),`tree.New(2))` ควรได้ค่า false.

เอกสารของ `Tree` หาได้ที่ [[https://godoc.org/golang.org/x/tour/tree#Tree][here]]

.play concurrency/exercise-equivalent-binary-trees.go

* sync.Mutex

เราได้เห็นสุดยอดการสื่อสารระหว่าง goroutine ไปแล้ว

แล้วถ้าเกิดว่าเราไม่ได้อยากจะให้มันคุยกันล่ะ? มีวิธีไหนถ้าเราแค่อยากมั่นใจว่า ในเวลาใดเวลาหนึ่งจะมี
แค่หนึ่ง goroutine เท่านั้นที่เข้าถึงตัวแปรตัวหนึ่งได้โดยไม่แย่งกัน?

แนวคิดนี้เรียกว่า _mutual_exclusion_ และเรามักจะตั้งชื่อให้โครงสร้างข้อมูล พวกนี้ให้ง่ายขึ้นว่า _mutex_

ในไลบรารี่มาตรฐานของ Go ได้เตรียม mutual exclusion ไว้แล้วที่ [[https://golang.org/pkg/sync/#Mutex][`sync.Mutex`]]
มันมีสองเมธอดคือ:

- `Lock`
- `Unlock`

เราสามารถกำหนดบล็อคของโค้ดให้ทำใน mutual exclusion ด้วยการครอบมันด้วยการเรียก 
`Lock` และ `Unlock` แบบที่แสดงให้เห็นในเมธอด `Inc`

เรายังสามารถใช้ `defer` เข้ามาเพื่อให้มั่นใจว่า muxtex จะถูกปลดล็อคได้ด้วย เหมือนที่ทำในเมธอด `Value`

.play concurrency/mutex-counter.go

* Exercise: Web Crawler

ในแบบฝึกหัดนี้ คุณจะได้ใช้คุณสมบัติ concurrency ของ Go เพื่อไปรวบรวมข้อมูลจากเว็บ แบบ parallelize

ลองแก้ไขฟังก์ชั่น `Crawl` ให้ดึงข้อมูลจาก URL หลายๆ ที่พร้อมๆ กัน โดยห้ามดึงมาจาก URL เดียวกันซ้ำ

_ตัวช่วย_:  คุณสามารถเก็บแคชของแต่ละ URL ที่ดึงมาไว้ใน map แต่ก็อีกนั่นแหล่ะ map ตัวเดียวโดดๆ ก็ไม่ปลอดภัยที่จะเอามาใช้แบบ concurrent!

.play concurrency/exercise-web-crawler.go

* Where to Go from here...

#appengine: คุณสามารถเริ่มต้นที่
#appengine: [[https://go.dev/doc/install/][installing Go]].

#appengine: เมื่อใดที่คุณติดตั้ง Go แล้ว
[[https://go.dev/doc/][Go Documentation]] เป็นที่ๆ ดีสำหรับการ
#appengine: ไปต่อ
เริ่มต้น
มันจะเต็มไปด้วยแหล่งอ้างอิง แบบฝึกหัด วีดีโอและอื่นๆ อีกมาก

อ่าน [[https://go.dev/doc/code][How to Write Go Code]] เพื่อเรียนรู้วิธีการจัดการและการทำงานกับโค้ด Go

ถ้าคุณต้องการตัวช่วยเกี่ยวกับไลบรารี่มาตรฐาน ให้ไปที่ [[https://go.dev/pkg/][package reference]] ส่วนตัวช่วยที่เกี่ยวกับตัวภาษาเอง คุณอาจจะแปลกใจถ้าไปดูที่ [[https://golang.org/ref/spec][Language Spec]] มันค่อนข้างอ่านง่ายเลยทีเดียว

หากอยากศึกษาเพิ่มเติมเกี่ยวกับรูปแบบของ concurrency ใน Go ลองดู
[[https://www.youtube.com/watch?v=f6kdp27TYZs][Go Concurrency Patterns]]
([[https://go.dev/talks/2012/concurrency.slide][slides]])
และ
[[https://www.youtube.com/watch?v=QDDwwePbDtw][Advanced Go Concurrency Patterns]]
([[https://go.dev/talks/2013/advconc.slide][slides]])
และอ่าน
[[https://golang.org/doc/codewalk/sharemem/][Share Memory by Communicating]]
เพื่อไล่โค้ด

ถ้าอยากเริ่มเขียน web applications ลองดูที่
[[https://vimeo.com/53221558][A simple programming environment]]
([[https://talks.golang.org/2012/simple.slide][slides]])
และอ่าน แบบฝึกหัด
[[https://go.dev/doc/articles/wiki/][Writing Web Applications]]

ไล่โค้ดที่ [[https://go.dev/doc/codewalk/functions/][First Class Functions in Go]] จะให้มุมมองที่น่าสนใจเกี่ยวกับ type ของฟังก์ชั่นใน Go

ที่ [[https://go.dev/blog/][Go Blog]] เป็นคลังของบทความของ Go ที่ใหญ่มาก

สุดท้าย ไปเยี่ยม [[https://go.dev/][golang.org]] บ่อยๆ นะ

