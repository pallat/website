Methods and interfaces
บทเรียนนี้ครอบคลุมเรื่อง method และ interface การสร้างอ็อบเจกต์ และพฤติกรรมของพวกมัน

The Go Authors
https://golang.org

* Methods

ภาษา Go ไม่มีคลาสให้ใช้
แต่อย่างไรก็ดี คุณยังสามารถสร้าง เมธอดให้ type ต่างได้

เมธอดคือฟังก์ชั่นที่มีอากิวเม้นต์ _ที่รับเข้ามา_แบบพิเศษ_ เรียกว่า receiver

เจ้า receiver นี้จะปรากฏขึ้นมาอยู่ตรงกลางระหว่างคีย์เวิร์ด `func` กับชื่อเมธอด เป็นอากิวเม้นต์ของตัวมันเอง

ในตัวอย่างนี้ เมธอด `Abs` รับ receiver ของ type `Vertex` เข้ามา และตั้งชื่อมันว่า `v`

.play methods/methods.go

* Methods are functions

ข้อควรจำ: เมธอดเป็นแค่ฟังก์ชั่นที่มี receiver เป็นอากิวเม้นต์

นี่คือฟังก์ชั่น `Abs` ที่เขียนเหมือนปกติโดยไม่มีการเปลี่ยนแปลงส่วนของการทำงานเลยแม้แต่น้อย

.play methods/methods-funcs.go

* Methods continued

คุณสามารถเขียนเมธอดไว้กับ type ที่ไม่ใช่ struct ก็ได้ด้วย

นี่คือตัวอย่างให้เราเห็น type `MyFloat` ที่มีเมธอด `Abs`

คุณสามาถสร้างเมธอดและรับ receiver ที่เป็น type ใดก็ได้ภายในแพ็คเกจเดียวกันเท่านั้น
คุณไม่สามารถสร้างเมธอดและรับ receiver ของ type ที่อยู่แพ็คเกจอื่นได้
(รวมถึง type ที่ built-in อย่างเช่น `int` ก็ไม่ได้เช่นกัน)

.play methods/methods-continued.go

* Pointer receivers

คุณสามารถสร้างเมธอดและรับ receiver เข้ามาเป็นพอยเตอร์ได้

หมายความว่า receiver สามารถประกาศแบบนี้ `*T` สำหรับบาง type `T`
(ที่ยกเว้นคือ ตัว `T` เองเป็นพอยเตอร์อยู่แล้วเช่น `*int`)

ตัวอย่างเช่น เมธอด `Scale` ตอนนี้สร้างไว้บน `*Vertex`

เมธอดที่รับ receiver เป็นพอยเตอร์นี้จะสามารถแก้ไขค่าที่ receiver ชี้อยู่ได้
(กรณีนี้คือ `Scale`)
ซึ่งโดยส่วนมากแล้วเมธอดก็มักจะต้องการแก้ไขค่าของ receiver อยู่แล้ว การรับ receiver เข้ามาเป็นพอยเตอร์
จึงถูกพบเห็นได้บ่อยกว่าเป็นปกติ

ทดลองลบ `*` ออกจากการประกาศฟังก์ชั่น `Scale` ที่บรรทัดที่ 16 ดู
และสังเกตว่าพฤติกรรมของโปรแกรมจะเปลี่ยนไปอย่างไร

สำหรับการรับ receiver เข้ามาเป็นค่าธรรมดานั้น เมธอด `Scale` จะก๊อปปี้ค่าจากต้นฉบับเข้ามาเป็นค่า `Vertex` อยู่ภายใน
(พฤติกรรมนี้เหมือนกันกับที่ฟังก์ชั่นทั่วไปรับอากิวเม้นต์เข้ามานั่นแหล่ะ)
ดังนั้นเมธอด `Scale` จึงจำเป็นต้องรับ receiver เป็นพอยเตอร์ เพื่อที่จะเปลี่ยนค่า `Vertex` ที่เกิดในฟังก์ชั่น `main` ได้

.play methods/methods-pointers.go

* Pointers and functions

ทีนี้เราลองมาดูเมธอด `Abs` และ `Scale` ที่เอามาเขียนใหม่เป็นแบบฟังก์ชั่นดูบ้าง

มาลองลบ `*` ในบรรทัดที่ 16 ออกอีกครั้ง
คุณเห็นพฤติกรรมมันเปลี่ยนไปไหม?
นอกจากจุดนี้แล้ว มีจุดอื่นที่คุณอยากจะแก้ไขมันก่อนจะคอมไพล์หรือไม่?

(ถ้าคุณยังไม่แน่ใจ ไปดูหน้าถัดไปต่อเลย)

.play methods/methods-pointers-explained.go

* Methods and pointer indirection

การเปรียบเทียบโปรแกรมทั้งสองก่อนหน้านี้ คุณอาจจะสังเกตได้ว่า
ฟังก์ชั่นที่รับอากิวเม้นต์เป็นพอยเตอร์จะต้องรับพอยเตอร์เข้ามา:

	var v Vertex
	ScaleFunc(v, 5)  // Compile error!
	ScaleFunc(&v, 5) // OK

ในขณะที่เมธอดกับ receiver จะไม่สนใจว่าค่าที่ให้มาเป็น receiver จะเป็นค่าธรรมดาหรือพอยเตอร์
มันก็เอาไปเรียกใช้งานได้ทั้งคู่:

	var v Vertex
	v.Scale(5)  // OK
	p := &v
	p.Scale(10) // OK

ในส่วนของ `v.Scale(5)` แม้ว่า `v` จะเป็นค่าธรรมดาและไม่ได้เป็นพอยเตอร์
เจ้าเมธอดที่รับ receiver เป็นพอยเตอร์ก็ยังคงเรียกใช้งานได้โดยอัตโนมัติ
นั่นก็เพราะ ด้วยสำนวนของ Go จะแปลส่วนของ `v.Scale(5)` ไปเป็น `(&v).Scale(5)`
ให้ เมื่อเมธอด `Scale` มี receiver เป็นพอยเตอร์

.play methods/indirection.go

* Methods and pointer indirection (2)

ในทางตรงกันข้าม

ฟังก์ชั่นที่รับค่าอากิวเม้นต์เข้ามา จะต้องรับค่าตาม type ที่ระบุมาเท่านั้น

	var v Vertex
	fmt.Println(AbsFunc(v))  // OK
	fmt.Println(AbsFunc(&v)) // Compile error!

ในขณะที่เมธอดกับ receiver จะไม่สนใจว่าค่าที่ให้มาเป็น receiver จะเป็นค่าธรรมดาหรือพอยเตอร์
มันก็เอาไปเรียกใช้งานได้ทั้งคู่:

	var v Vertex
	fmt.Println(v.Abs()) // OK
	p := &v
	fmt.Println(p.Abs()) // OK

ในกรณีนี้ ตอนที่เรียกเมธอด `p.Abs()` มันจะแปลไปเป็น `(*p).Abs()` ให้เอง

.play methods/indirection-values.go

* Choosing a value or pointer receiver

มีอยู่สองเหตุผลที่จะรับ receiver เข้ามาเป็นพอยเตอร์

ข้อแรก เพราะมันจะทำให้เมธอดสามารถแก้ไขค่าที่ receiver ชี้อยู่ได้

ข้อสอง เพื่อป้องกันการก๊อปปี้ค่า ในทุกๆ ทั้งที่เรียกใช้เมธอด
นี่จะช่วยเพิ่มประสิทธิภาพเมื่อต้องทำงานกับ struct ขนาดใหญ่ ดังตัวอย่าง

ในตัวอย่างนี้ ทั้ง `Scale` และ `Abs` รับ receiver เป็น `*Vertex` เข้ามาทั้งคู่
ทั้งๆ ที่เมธอด `Abs` ไม่ได้ต้องการแก้ไขค่าใน receiver แต่อย่างใด

โดยทั่วไป ทุกๆ เมธอดใน type เดียวกันจะรับ receiver มาอย่างใดอย่างหนึ่งไม่ว่าจะรับมาเป็นค่าธรรมดาหรือพอยเตอร์
แต่มักจะเลือกรับมาในรูปแบบเดียวกัน
(เราะจะได้เห็นว่าทำไมจึงเป็นเช่นนั้นในอีกไม่กี่หน้าต่อจากนี้)

.play methods/methods-with-pointer-receivers.go

* Interfaces

_interface_type_ ใช้ประกาศ ลายเซ็นของชุดเมธอด

ค่า value ของ interface สามารถเป็นอะไรก็ได้ขอแค่ต้องมีเมธอดตามที่กำหนด

*หมายเหตุ:* มี error ตรงบรรทัดที่ 22 ในโค้ดตัวอย่าง
เพราะว่า `Vertex` (type ของ value) ไม่ได้ทำตาม `Abser` เพราะว่า
เมธอด `Abs` สร้างขึ้นมาบน `*Vertex` เท่านั้น (พอยเตอร์ของ type)

.play methods/interfaces.go

* Interfaces are implemented implicitly

type ที่จะปฏิบัติตาม interface ทำได้ด้วยการสร้างเมธอดตามนั้น
โดยไม่ต้องแสดงออกอย่างจงใจด้วยวิธีการอื่นใด ไม่ต้องมีคีย์เวิร์ดอย่าง "implements"

implicit interface หรือแบบปริยายนี้จะให้อิสระกับของที่ต้องการปฏิบัติตามจากการนิยามใดๆให้กับตัวมันเอง
และมันจะอยู่ที่แพ็คเกจไหนก็ได้ โดยไม่ต้องพะวงเรื่องการเตรียมการสำหรับสิ่งนี้

.play methods/interfaces-are-satisfied-implicitly.go

* Interface values

ค่า value ที่อยู่ภายใต้ interface ให้คิดว่ามันเป็น tuple ของค่า value ที่มันเก็บ กับ type จริงๆ ของค่านั้น:

	(value, type)

value ใน interface จะเก็บค่า ค่าหนึ่งตาม type จริงของมันไว้ด้านล่าง

การเรียกเมธอดบน ค่า value ของ interface จะไปเรียกเมธอดชื่อเดียวกันบน type ที่อยู่ด้านล่างของมันอีกที

.play methods/interface-values.go

* Interface values with nil underlying values

ถ้าค่า value จริงๆ ใน interface เป็นค่า nil
เมธอดจะถูกเรียกอยู่บน receiver ที่เป็น nil ด้วย

ในบางภาษาสิ่งนี้จะไปกระตุ้นให้เกิด null pointer exception
แต่ใน Go เราจะมีวิธีเขียนเพื่อจัดการสิ่งนี้ให้สวยๆ กันเป็นปกติอยู่แล้ว เมื่อรับ receiver มาเป็นพอยเตอร์
(เหมือนอย่างที่เมธอด `M` ทำในตัวอย่างนี้)

อีกเรื่องที่ควรรู้คือ แม้ว่าค่า value ใน interfae จะถือค่า nil ของ ค่าอะไรไว้ก็แล้วแต่ แต่ตัวมันเองนั้นไม่ได้เป็น nil ไปด้วยนะ

.play methods/interface-values-with-nil.go

* Nil interface values

ค่า value ของ interface ที่เป็น nil จะไม่มีอะไรอยู่ใต้มันเลย ไม่ว่าจะเป็นค่า value หรือ type

การเรียกเมธอดไปที่ interface ที่เป็น nil นี้จะเกิด run-time error เพราะว่า
ไม่มี type อะไรอยู่ใน tuple ทำให้มันไม่มีเมธอด _ตัวจริง_ ให้เรียก

.play methods/nil-interface-values.go

* The empty interface

type ที่สร้างจาก interface สามารถที่จะไม่มีเมธอดเลยก็ได้ สิ่งนี้เราเรียกมันว่า _empty_interface_:

	interface{}

empty interface จะถึงค่าของ type อะไรก็ได้ทั้งนั้น
(เพราะอย่างน้อยสุดทุก type ก็มีเมธอดอยู่ศูนย์ตัวเป็นทุนเดิมอยู่แล้ว)

empty interface มักจะถูกใช้กับโค้ดที่ต้องการจัดการกับค่าที่ไม่รู้ type
ตัวอย่างเช่น `fmt.Print` ที่รับอากิวเม้นต์หลายๆ ตัวเข้ามาเป็น `interface{}`

.play methods/empty-interface.go

* Type assertions

_type_assertion_ คือการเจาะเข้าไปที่ value ของ type จริงๆ ที่อยู่ในนั้น

	t := i.(T)

กระบวนการนี้จะอ้างถึง type `T` ที่ interface นี้ถือครองอยู่
และนำเอาค่าจาก type `T` ที่อยู่ใต้นั้นออกมาใส่ให้ตัวแปร `t`

แต่ถ้า `i` ไม่ได้ถือครอง `T` อยู่จริง กระบวนการนี้อาจจะก่อให้เกิดการ panic

การ _ทดสอบ_ ว่า ค่าใน interface นี้ถือ type นี้อยู่จริงหรือไม่
ทำได้โดย type assertion ซึ่งจะสามารถคืนค่าที่สอง: เป็นค่านิพจน์ ที่รายงานผลของการทำ assertion
ว่าสำเร็จหรือไม่ออกมา

	t, ok := i.(T)

ถ้า `i` ถือครอง `T` อยู่จริง `t` จะได้ค่าในนั้นออกมา และ `ok` จะเป็น true

แต่ถ้าไม่ใช่ `ok` จะเป็น false และ `t` ก็จะกลายเป็น zero value ของ type `T` แทน

สักเกตได้ว่า ท่านี้จะมีความคล้ายกับที่เราเคยได้อ่านจากเรื่อง map

.play methods/type-assertions.go

* Type switches

การทำ _type_switch_ คือการทำ type assertion จำนวนมากพร้อมๆกัน

type switch มีความคล้ายกับ switch ปกติ เพียงแค่ว่าในแต่ละเคส
จะใช้การระบุ type ลงไปตรงๆ เลย (ไม่ใช่ค่า) เพื่อจะค้นหาว่าใน interface นั้น
ถือครองอะไรอยู่


	switch v := i.(type) {
	case T:
		// here v has type T
	case S:
		// here v has type S
	default:
		// no match; here v has the same type as i
	}

รูปแบบการทำ type switch มีความคล้ายกับการทำ type assertion `i.(T)`
แต่แค่เปลี่ยนจากการระบุ type `T` ไปเป็นคีย์เวิร์ด `type` แทน

ในขั้นตอนของ switch นี้มันจะทดสอบว่า `i` ถือครอง type `T` หรือ `S` อยู่
และในแต่ละเคส `T` และ `S` จะได้ค่าตัวแปร `v` ตรงกับ type `T` หรือ `S` ตามลำดับ
พร้อมกับถือค่าที่อยู่ใน `i` เอาไว้ด้วย
ในเคส default (เมื่อไม่ตรงกับใครเลย) ค่าตัวแปร `v` จะได้ออกมาเป็นค่าตาม type ของ `i`

.play methods/type-switches.go

* Stringers

มี interface ตัวหนึ่งที่ถูกใช้อย่างแพร่หลาย มันคือ [[//golang.org/pkg/fmt/#Stringer][`Stringer`]] ที่ถูกกำหนดขึ้นโดยแพ็คเกจ [[//golang.org/pkg/fmt/][`fmt`]]

	type Stringer interface {
		String() string
	}

`Stringer` เป็น type ที่ใช้บอกว่าตัวมันเองนั้นเป็นสตริง ซึ่งแพ็คเกจ `fmt` (และแม้กระทั่งแพ็คเกจอื่นๆ)
จะใช้ interface นี้ในการพิมพ์ค่าออกมา

.play methods/stringer.go

* Exercise: Stringers

ทำให้ type `IPAddr` มีความเป็น `fmt.Stringer` ให้มันพิมพ์แอดเดรสออกมาเป็น สี่ส่วนคั่นด้วยจุด

ตัวอย่างอินสแตนซ์ `IPAddr{1,`2,`3,`4}` ควรจะพิมพ์ออกมาได้ `"1.2.3.4"`

.play methods/exercise-stringer.go

* Errors

โปรแกรมใน Go ใช้วิธีการแสดง error ออกมาเป็นค่าของ `error`

type `error` เป็น interface ที่ถูก บิวต์อินมาให้ ซึ่งมันมีความคล้ายกับ `fmt.Stringer`:

	type error interface {
		Error() string
	}

(interface `error` จะถูกมองแบบเดียวกับ `fmt.Stringer` ในแพ็คเกจ `fmt` เวลาที่มันจะพิมพ์ค่าออกมา)

ฟังก์ชั่นต่างๆ มักจะคืนค่า `error` และการเรียกใช้มันก็ควรมีการจัดการกับ error ด้วยการทดสอบ
ว่ามันมีค่าเป็น `nil` หรือไม่เสมอ

	i, err := strconv.Atoi("42")
	if err != nil {
		fmt.Printf("couldn't convert number: %v\n", err)
		return
	}
	fmt.Println("Converted integer:", i)

`error` ที่เป็น nil แปลว่ามันสำเร็จ ส่วน `error` ที่มีเป็น nil แปลว่ามีความผิดพลาดเกิดขึ้น

.play methods/errors.go

* Exercise: Errors

ไปลอกฟังก์ชั่น `Sqrt` ของคุณมาจาก [[/flowcontrol/8][earlier exercise]] แล้วแก้มันให้คืนค่า `error` ออกมา

`Sqrt` ควรจะคืนค่า error ที่ไม่เป็น nil ออกมาถ้าให้ตัวเลขที่เป็นลบเข้าไป เนื่องจากมันไม่รองรับจำนวนเชิงซ้อน

จากนั้นลองสร้าง type ขึ้นมาใหม่

	type ErrNegativeSqrt float64

และทำให้มันเป็น `error` ด้วยการทำแบบนี้

	func (e ErrNegativeSqrt) Error() string

การทำแบบนี้ `ErrNegativeSqrt(-2).Error()` กับเมธอด จะตอบออกมาว่า `"cannot`Sqrt`negative`number:`-2"`

*ข้อควรระวัง:* การเรียก `fmt.Sprint(e)` ในเมธอด `Error` จะทำให้โปรแกรมติดอยู่ในลูปอนันต์ คุณควรป้องกันสิ่งนี้ด้วยการแปลง `e` ก่อน: `fmt.Sprint(float64(e))`
ทำไมนะ?

ทีนี้มาแก้ฟังก์ชั่น `Sqrt` ของคุณให้มันคืนค่า `ErrNegativeSqrt` ออกมาเวลาที่มันเจอค่าติดลบ

.play methods/exercise-errors.go

* Readers

ที่แพ็คเกจ `io` มีการกำหนด interface ชื่อว่า `io.Reader`
เอาไว้เพื่อเป็นตัวแทนของการอ่านข้อมูลจากสตรีม

ไลบรารี่มาตรฐานของ Go ที่อยู่ในนี้ [[https://cs.opensource.google/search?q=Read%5C(%5Cw%2B%5Cs%5C%5B%5C%5Dbyte%5C)&ss=go%2Fgo][จำนวนไม่น้อยที่ปฏิบัติ]] ตามแนวทางของ interface นี้ ได้แก่ files, network connections, compressors, ciphers, และอื่นๆ

interface `io.Reader` มีเมธอดที่ชื่อ `Read`:

	func (T) Read(b []byte) (n int, err error)

`Read` จะดึงข้อมูลจาก slice ของ byte ที่ให้มา และคืน จำนวนของไบต์ที่ดึงออกไปได้ พร้อมกับ error
มันจะคืน error ออกมาเป็น `io.EOF` เมื่อข้อมูลหมดแล้ว

โค้ดตัวอย่างนี้ สร้าง [[//golang.org/pkg/strings/#Reader][`strings.Reader`]]
ขึ้นมาตัวหนึ่ง และจะดึงข้อมูลออกมาทีละ 8 ไบต์

.play methods/reader.go

* Exercise: Readers

ทำให้ `Reader` type ตัวนี้คายอักขระ ASCII ตัว `A` ออกมาเสมอ

.play methods/exercise-reader.go

* Exercise: rot13Reader

รูปแบบหนึ่งที่ [[https://go.dev/pkg/io/#Reader][io.Reader]] ถูกใช้เป็นประจำ คือการเอาไปหุ้ม `io.Reader` ตัวอื่น เพื่อแก้ไขข้อมูลสตรีมด้วยวิธีการบางอย่าง

ตัวอย่างเช่น ฟังก์ชั่น [[https://go.dev/pkg/compress/gzip/#NewReader][gzip.NewReader]] จะรับเอา `io.Reader` เข้ามา (เป็นสตรีมข้อมูลที่ถูกบีบอัดไว้) และคืนค่า `*gzip.Reader` ออกมาตัวหนึ่งซึ่งเป็น `io.Reader` (เป็นสตรีมของข้อมูลที่คลายการบีบอัด)

มาทำให้ `rot13Reader` เป็น `io.Reader` โดยให้มันอ่านข้อมูลจาก `io.Reader` ตัวหนึ่งและปรับข้อมูลของสตรีมตามการเข้ารหัสอักขระแบบ [[https://en.wikipedia.org/wiki/ROT13][rot13]]

type `rot13Reader` ถูกสร้างไว้ให้คุณแล้ว
ทำให้มันเป็น `io.Reader` โดยการสร้างเมธอด `Read` ให้มัน

.play methods/exercise-rot-reader.go

* Images

[[https://go.dev/pkg/image/#Image][แพ็คเกจ image]] กำหนด interface ไว้ชื่อว่า `Image`:

	package image

	type Image interface {
		ColorModel() color.Model
		Bounds() Rectangle
		At(x, y int) color.Color
	}

*จุดสังเกต*: ค่า `Rectangle` ที่ได้มาจากเมธอด `Bounds` นั้นคือ [[https://golang.org/pkg/image/#Rectangle][`image.Rectangle`]]
ซึ่งถูกประกาศไว้ในแพ็คเกจ `image`

(ดูรายละเอียดได้ที่ [[https://go.dev/pkg/image/#Image][the documentation]])

type `color.Color` และ `color.Model` ก็เป็น interface เช่นกัน แต่เราจะไม่สนใจมันเพราะได้เตรียม `color.RGBA` และ `color.RGBAModel` ไว้ให้ใช้แล้ว
และtype interface พวกนี้ถูกกำหนดมาจาก [[https://go.dev/pkg/image/color/][image/color package]]

.play methods/images.go

* Exercise: Images

ยังจำ [[/moretypes/18][picture generator]] ที่คุณเขียนไปก่อนหน้านี้ได้ไหม?
เรามาเขียนอีกสักอัน แต่คราวนี้มันจะคืน `image.Image` ออกมาแทนข้อมูลที่เป็น slice

กำหนด type `Image` ของคุณ [[https://go.dev/pkg/image/#Image][ให้มีเมธอดเท่าที่จำเป็น]] และเรียก `pic.ShowImage`

`Bounds` ควรคืนค่า `image.Rectangle` คล้ายๆ แบบนี้ `image.Rect(0,`0,`w,`h)`

`ColorModel` ควรคืนค่า `color.RGBAModel`.

`At` ควรคืนค่าสีออกมาสีหนึ่ง ซึ่งค่า `v` จาก picture generator ก่อนหน้านี้นั้นจะมีความเชื่อมโยงกับ `color.RGBA{v,`v,`255,`255}` ที่นี่ด้วย

.play methods/exercise-images.go

* ยินดีด้วย!

คุณเรียนจบบทเรียนนี้แล้ว!

คุณสามารถย้อนกลับไปดูรายการของ [[/list][modules]] เพื่อหาสิ่งที่ต้องการจะเรียนต่อ หรือไปที่ [[javascript:click('.next-page')][next lesson]] ด้วยกันเลย
