More types: structs, slices, and maps.
เรียนรู้การสร้าง type ขึ้นมาจากของที่มีอยู่: เนื้อหาในบทนี้ครอบคลุมไปถึงเรื่อง structs, arrays, slices, และ maps

The Go Authors
https://golang.org

* Pointers

ภาษา Go มีพอยเตอร์
ค่าในตัวแปร พอยเตอร์คือ address ในหน่วยความจำ

type `*T` คือพอยเตอร์ที่ชี้ไปที่ค่า `T` ซึ่ง zero value ของมันคือ `nil`

	var p *int

ใช้ตัว `&` เพื่อสร้างพอยเตอร์ที่ชี้ไปที่ค่าในตัวแปรนั้น

	i := 42
	p = &i

ใช้ตัว `*` เพื่อดึงค่าภายใต้แอดเดรสที่พอยเตอร์นั้นชี้อยู่ ออกมา

	fmt.Println(*p) // read i through the pointer p
	*p = 21         // set i through the pointer p

สิ่งนี้รู้จักกันในชื่อ "dereferencing" หรือ "indirecting"

พอยเตอร์ของ Go ต่างจากภาษา C ตรงที่ ไม่สามารถนำมาคำนวณในทางคณิตศาสตร์ได้

.play moretypes/pointers.go

* Structs

`struct` คือการรวมฟิลด์เข้ามาไว้ด้วยกัน

.play moretypes/structs.go

* Struct Fields

ฟิลด์ของ struct เข้าถึงได้ด้วยการใช้เครื่องหมายจุด

.play moretypes/struct-fields.go

* Pointers to structs

ฟิลด์ของ struct สามารถเข้าถึงได้แม้ว่าจะผ่านพอยเตอร์ของ struct

เช่น การเข้าถึงฟิลด์ `X` ใน struct กรณีที่เรามีตัวแปร `p` เป็นพอยเตอร์ของ struct มันก็ควรจะเขียนว่า `(*p).X`
อย่างไรก็ดี การใช้เครื่องหมายแบบนั้นมันทำให้ดูยาก ตัวภาษาก็เลยยอมให้เขียนเป็น `p.X` แทนได้
โดยไม่ต้องเขียนแบบ อ้างถึงอย่างจงใจขนาดนั้น

.play moretypes/struct-pointers.go

* Struct Literals

การประกาศตัวแปร struct คือการจองพื้นที่ให้ค่า struct ด้วยการนำค่าในแต่ละฟิลด์มาเรียงไว้

คุณสามารถจัดรายการเฉพาะบางฟิลด์ก็ได้ ด้วยการระบุ `Name:` (โดยไม่ต้องสนลำดับของฟิลด์)

เครื่องหมาย `&` ที่วางไว้ด้านหน้า จะรีเทิร์นค่าพอยเตอร์ที่ชี้ไปที่ค่าของ struct

.play moretypes/struct-literals.go


* Arrays

`[n]T` คือ type ของอาเรย์ ของ type `T` ที่มีจำนวน `n` ตัว

เมื่อประกาศแบบนี้

	var a [10]int

คือการประกาศตัวแปร `a` เป็นอาเรย์ที่มี integer จำนวนสิบตัว

ขนาดของอาเรย์ก็เป็นส่วนหนึ่งของ type นี้ด้วย ดังนั้นจึงไม่สามารถเปลี่ยนขนาดของอาเรย์ได้
ซึ่งดูเหมือนกับจะเป็นข้อจำกัด แต่อย่าเพิ่งกังวล:
เพราะภาษา Go ได้เตรียมวิธีให้ทำงานกับอาเรย์ด้วยวิธีง่ายๆ ไว้ให้แล้ว

.play moretypes/array.go


* Slices

อาเรย์มีขนาดที่ตายตัว แต่ในทางกลับกัน slice มีขนาดที่สามารถแปรผันได้
เป็นมุมมองการเข้าถึงสมาชิกของอาเรย์แบบคล่องตัวกว่า

`[]T` คือ type ของ slice ที่มีสมาชิกเป็น type `T`

slice ใดๆ จะเกิดขึ้นมาจากการระบุตัวชี้สองค่า คือค่าขอบล่าง และค่าขอบบน
และคั่นด้วยเครื่องหมายโคลอน:

	a[low : high]

การเลือกบางช่วงแบบนี้ คือการรวมเอาสมาชิกที่ระบุในค่าแรกและตัดสมาชิกที่ค่าหลังออก

ตามตัวอย่างด้านล่างนี้จะสร้าง slice โดยจะได้สามาชิกตัวที่ 1 ไปจนถึงตัวที่ 3 ของ `a`:

	a[1:4]

.play moretypes/slices.go


* Slices are like references to arrays

slice ไม่ได้เก็บข้อมูลใดๆ ไว้ที่ตัวเองเลย
มันเพียงแค่อธิบายว่าอาเรย์แบบไหนซ่อนอยู่ใต้มันแค่นั้น

การเปลี่ยนแปลงค่าสมาชิกใน slice จะส่งผลกระทบโดยตรง
ไปที่สมาชิกของอาเรย์ที่อยู่ด้านล่างด้วย

slice อื่นๆ ที่แชร์อาเรย์ตัวเดียวกันอยู่ด้านล่างก็จะเห็นการเปลี่ยนแปลงนี้เช่นกัน

.play moretypes/slices-pointers.go


* Slice literals

การประกาศตัวแปร slice เหมือนการประกาศตัวแปรอาเรย์ เพียงแค่ไม่มีขนาดกำกับ

นี้คือการประกาศอาเรย์:

	[3]bool{true, true, false}

และอันนี้จะไปสร้างอาเรย์แบบเดียวกับด้านบน
พร้อมกับสร้าง slice ไปชี้มันไว้:

	[]bool{true, true, false}

.play moretypes/slice-literals.go


* Slice defaults

เวลาที่คุณจะหั่น slice คุณอาจจะละการกำหนดขอบบนหรือขอบล่าง เพื่อให้มันเป็นค่าตั้งต้นแทนได้

ค่าตั้งต้นของขอบล่างคือศูนย์ และค่าขอบบนก็คือความยาวของ slice นั่นเอง

สมมุติมีอาเรย์แบบนี้

	var a [10]int

การสร้าง slice พวกนี้จะได้ค่าเท่ากันหมด:

	a[0:10]
	a[:10]
	a[0:]
	a[:]

.play moretypes/slice-bounds.go


* Slice length and capacity

ตัว slice มีทั้งค่า _ความยาว_ และ _ความจุ_

ความยาวของ slice คือจำนวนของสมาชิกที่อยู่ในนั้น

ส่วนความจุของ slice คือจำนวนของสมาชิกของอาเรย์ที่อยู่ใต้มันอีกที
โดยจะเริ่มต้นนับจากสมาชิกตัวแรกของ slice

ความยาวและความจุของ slice `s` สามารถนำออกมาได้ด้วยการใช้คำสั่ง
`len(s)` และ `cap(s)`

คุณสามารถขยายความยาวของ slice ได้ด้วยการ หั่นมันใหม่
ตราบเท่าที่ยังมีความจุเพียงพอ
ทดลองเปลี่ยนการจัดการ slice สักตัวในตัวอย่างโปรแกรม ด้วยการขยายขนาดให้มัน
จนเกินกว่าความจุที่มี และลองดูว่าจะเกิดอะไรขึ้น

.play moretypes/slice-len-cap.go


* Nil slices

ค่า zero value ของ slice คือค่า `nil`

slice ที่มีค่าเป็น nil จะมีความยาวและความจุเป็น 0
และจะไม่มีอาเรย์ใดๆ อยู่ใต้มัน

.play moretypes/nil-slices.go


* Creating a slice with make

คุณยังสามารถสร้าง slice ได้ด้วยฟังก์ชั่น `make`
และนี่ก็คือการสร้าง อาเรย์ที่มีขนาดแปรผันได้นั่นเอง

ฟังก์ชั่น `make` จะสร้างอาเรย์ความยาวเท่ากับศูนย์
และรีเทิร์น slice ที่อ้างไปถึงอาเรย์ตัวนั้นออกมา:

	a := make([]int, 5)  // len(a)=5

สำหรับการกำหนดค่าความจุให้ใส่อากิวเมนต์ตัวที่สามให้กับ `make`:

	b := make([]int, 0, 5) // len(b)=0, cap(b)=5

	b = b[:cap(b)] // len(b)=5, cap(b)=5
	b = b[1:]      // len(b)=4, cap(b)=4

.play moretypes/making-slices.go


* Slices of slices

slice สามารถมีสมาชิกเป็น type ไหนก็ได้ รวมถึง slice อื่นด้วย

.play moretypes/slices-of-slice.go


* Appending to a slice

การเพิ่มสมาชิกเข้าไปใน slice เป็นเรื่องปกติอยู่แล้ว และ Go ก็เตรียมฟังก์ชั่น `append` ไว้ให้
[[https://go.dev/pkg/builtin/#append][documentation]]
เกี่ยวกับ built-in package มีอธิบายเรื่อง `append` เอาไว้ด้วย

	func append(s []T, vs ...T) []T

พารามิเตอร์ตัวแรกของ `append` คือ `s` ซึ่งคือ slice ของ type `T` และพารามิเตอร์ที่เหลือนั้น
คือค่าของ `T` ที่ต้องการเพิ่มเข้าไปใน slice

ผลลัพธ์ของ `append` คือ slice ที่รวมทุกค่าใน slice ตั้งต้นบวกกับค่าที่ให้ไปทั้งหมดเข้าด้วยกัน

ถ้าอาเรย์ที่อยู่เบื้องหลัง `s` มีขนาดเล็กเกินกว่าที่จะรับค่าทั้งหมดได้
อาเรย์ตัวใหญ่กว่าจะถูกสร้างมาแทน และ slice ที่ได้จะชี้ไปที่อาเรย์ตัวใหม่ด้วย

(ถ้าต้องการข้อมูลเพิ่มเติมเกี่ยวกับ slice สามารถศึกษาเพิ่มเติมได้ที่บทความนี้ [[https://go.dev/blog/go-slices-usage-and-internals][Slices: usage and internals]])

.play moretypes/append.go


* Range

รูปแบบการใช้ `range` กับลูป `for` เพื่อวนค่าใน slice หรือ map

เมื่อวนค่าใน slice จะได้ค่ากลับคืนมาสองค่าในแต่ละรอบ
ค่าแรกคือค่าดัชนีของรอบนั้น และค่าที่สองคือค่า copy ของสมาชิกในตำแหน่งของดัชนีนั้น

.play moretypes/range.go

* Range continued

คุณสามารถยกเว้นการรับ ดัชนี หรือ ค่า ได้ด้วยการใช้ `_`

    for i, _ := range pow
    for _, value := range pow

ถ้าคุณต้องการแค่ดัชนี คุณสามารถละค่าที่สองไปเลยแบบนี้

    for i := range pow

.play moretypes/range-continued.go

* Exercise: Slices

ทำ `Pic` ให้เสร็จ โดยมันจะต้องรีเทิร์น slice ที่มีความยาวเท่ากับ `dy`
และแต่ละชิ้นในนั้นจะเป็น slice ที่มีความยาวเท่ากับ `dx` ของ unsigned integer ขนาด 8-bit
เมื่อรันโปรแกรม มันจะแสดงภาพ จากการแปลงตัวเลขไปเป็นค่าสีแบบขาวดำ (อันที่จริงเป็นขาวน้ำเงิน)

เลือกภาพที่ชอบจากสูตรที่น่าสนใจนี้ไว้ในฟังก์ชั่น
`(x+y)/2`, `x*y`, และ `x^y`

(คุณต้องวนลูปใน `[][]uint8` เพื่อจัดสรร `[]uint8` ลงไป)

(ใช้ `uint8(intValue)` ในการแปลงค่าระหว่าง type)

.play moretypes/exercise-slices.go

* Maps

map ใช้จับคู่ key กับ value

ค่า zero value ของ map คือ `nil`
ค่า `nil` ใน map ไม่มี key ใดๆ หรือแม้แต่จะเพิ่ม key ใดๆ ก็ไม่สามารถ

ฟังก์ชั่น `make` จะคืนค่า map ตาม type ที่ให้ไป
หลังจากนั้นจะพร้อมนำไปใช้งานได้ทันที

.play moretypes/maps.go

* Map literals

การประกาศตัวแปร map คล้ายกับการประกาศตัวแปร struct เพียงแต่ต้องระบุ key ลงไปด้วยเสมอ

.play moretypes/map-literals.go

* Map literals continued

ถ้าใส่ชื่อ type ไว้บนสุดของการประกาศตัวแปรแล้ว สามารถละมันได้ในแต่ละชิ้นของการประกาศ

.play moretypes/map-literals-continued.go

* Mutating Maps

การใส่ค่าลงไป หรือแก้ไขค่าใดค่าหนึ่งใน map `m`:

	m[key] = elem

การนำค่าใดค่าหนึ่งออกมา:

	elem = m[key]

การลบค่าใดค่าหนึ่ง:

	delete(m, key)

การทดสอบว่ามี key นั้นอยู่หรือไม่ ด้วยการรับค่าที่สอง:

	elem, ok = m[key]

ถ้ามี key นั้นอยู่ใน `m` จริง ค่า `ok` จะเป็น `true` แต่ถ้าไม่มีอยู่จริง ค่า `ok` จะเป็น `false`

ถ้า `key` นั้นไม่มีอยู่จริงใน map ค่า `elem` ก็จะกลายเป็น zero value ตาม type ของค่าใน map นั้น

*หมายเหตุ:* ถ้า `elem` หรือ `ok` ยังไม่ได้ประกาศไว้ก่อนหน้านี้ คุณก็ควรใช้การประกาศรูปแบบย่อ:

	elem, ok := m[key]

.play moretypes/mutating-maps.go

* Exercise: Maps

ทำ `WordCount` ให้เสร็จ ซึ่งมันควรคืนค่า map ที่นับจำนวนแต่ละ "คำ" ในสตริง `s` ออกมา 
โดยจะใช้ฟังก์ชั่น `wc.Test` เพื่อทดสอบ และรายงานผลว่ามันทำงานได้ถูกต้องหรือไม่

คุณอาจจะอยากได้ตัวช่วยจากที่นี่ [[https://go.dev/pkg/strings/#Fields][strings.Fields]]

.play moretypes/exercise-maps.go

* Function values

ฟังก์ชั่นถือเป็นค่าค่าหนึ่งได้เหมือนกัน เพราะสามารถส่งมันไปที่ต่างๆ ได้แบบเดียวกับการใช้ค่าอื่นๆ

ค่าฟังก์ชั่นแบบนี้ อาจจะใช้เป็นอากิวเม้นต์หรือใช้รีเทิร์นออกมาก็ได้

.play moretypes/function-values.go

* Function closures

ฟังก์ชั่นใน Go เป็น closure ก็ได้ ลักษณะของ closure ก็คือเป็นค่าฟังก์ชั่น ที่อ้างถึงตัวแปรที่อยู่นอกตัวมันเอง
สามารถเข้าถึงและกำหนดค่าให้ตัวแปรนั้นได้ ซึ่งอาจจะมองได้ว่า ฟังก์ชั่นนี้ ผูกขอบเขตไปที่ตัวแปรที่ว่าก็ย่อมได้

ตัวอย่างเช่น ฟังก์ชั่น `adder` คืน closure ออกมาตัวหนึ่ง และแต่ละ closure นั้นจะผูกเขตตัวเองไว้กับตัวแปร `sum` ของมันเอง

.play moretypes/function-closures.go

* Exercise: Fibonacci closure

มาสนุกกับฟังก์ชั่นนี้กัน

ทำฟังก์ชั่น `fibonacci` นี้ให้เสร็จ โดยที่มันจะคืนฟังก์ชั่น (closure ตัวหนึ่ง) ที่จะคืนค่าต่อเนื่องออกมาเป็น [[https://en.wikipedia.org/wiki/Fibonacci_number][fibonacci numbers]]
(0, 1, 1, 2, 3, 5, ...)

.play moretypes/exercise-fibonacci-closure.go

* Congratulations!

คุณสำเร็จบทเรียนนี้แล้ว!

คุณสามารถย้อนกลับไปดูรายการของ [[/list][modules]] เพื่อหาสิ่งที่ต้องการจะเรียนต่อ หรือไปที่ [[javascript:click('.next-page')][next lesson]] ด้วยกันเลย
